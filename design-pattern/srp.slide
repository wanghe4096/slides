设计模式中的六大原则

wanghe
coolshine.net
wanghe@luojilab.com

* 单一职责原则 

* 单一职责的定义
- 应该有且仅有一个原因引起类的变更 
- 单一职责原则要求一个接口只有一个原因引起变化，也就是一个接口或类只有一个职责，它就负责一件事情

* 单一职责的好处

- 类型复杂性降低，实现什么职责都有清晰明确的定义

- 可读性提高，复杂性降低，自然可读性提高了

- 可维护性提高，可读性提高，那当然更容易维护了

- 变更上起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助

* 单一职责的难处

单一职责的难处是职责的划分。 一个职责一个接口，但问题是“职责”没有一个量化的标准，一个类到底要负责哪些职责？这些职责该怎么细化？细化后是否都要有一个接口或类？ 这些都需要从实际工作场景中去考虑

* 单一职责的例子
- 非常典型的就是我们目现在的微服务的划分，比如我们按业务职责进行划分
- 日常开发中的接口、类、函数、甚至是变量的职责的定义，都需要遵守单一职责

单一只责适用于接口、类，同时民适用于方法，什么意思呢？一个方法尽可能做一件事情，比如一个方法修改用户密码，不要把这个方法放到“修改用户信息”方法中，这个方法的颗粒度很粗

* 单一职责中需要注意

单一职责原则提出一个编写程序的标准，用“职责”或“变化原因”来衡量接口或类设计得是否优良，但是“职责”和“变化原因”都是不可度量的，因项目而异，因环境而异。 

不能生搬硬套， 犯了意识形态的错误。 

* 我单纯，我快乐

对接接口，我们在设计的时候一定要做到单一，但是对于实现类就需要多方面考虑了。 生搬硬套单一职责原则会引起类的剧增，给维护带来非常多的麻烦，而且过分细分类的职责也会人为地增加系统的复杂性。 本来一个类可以实现的行为硬要拆成两个类，然后再使用聚合或组合的方式耦合在一起，人为制造了系统的复杂性。 所以原则是死的， 人是活的，这句话很有道理。 

* 建议
对于单一职责，建议是接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化 



